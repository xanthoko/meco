import messages.idl;
import brokers.br;

Broker: MyRabbit
Broker: MyRedis
Broker: R4ABroker (default)

Node ProxyTake1{
    outports:
        - rpc_client tempRPC:
            message: SonarSensorMsgR
        - publisher:
            topic: temp.topic
            message: ThermoSensorMsg
        - publisher:
            topic: unused.topic.A
            message: SonarSensorMsg
}

Node ProxyGive1{
    outports:
        - rpc_client proxy_rpc:
            message: ProxyMessageR
    inports:
        - subscriber:
            topic: temp.topic
        - subscriber:
            topic: unused.topic.B
        - rpc_service unused:
            message: SonarSensorMsgR
}

Node BridgeGive1{
    outports:
        - publisher:
            topic: bridge.pub
            message: ThermoSensorMsg2
}

Node BridgeTake1{
    inports:
        - subscriber:
            topic: bridge.sub
    broker: MyRabbit
}

Node MixedGive1{
    outports:
        - publisher:
            topic: mixed.pub
            message: ThermoSensorMsg
}

Node MixedTake1{
    inports:
        - subscriber:
            topic: mixed.sub
    broker: MyRabbit
}

Node BridgeRPCGive1{
    outports:
        - rpc_client bridgeG1:
            message: SonarSensorMsgR
}

Node BridgeRPCTake1{
    inports:
        - rpc_service bridgeG2:
            message: SonarSensorMsgR
    broker: MyRabbit
}

TopicBridge MixedBridge1{
    R4ABroker(mixed.sub) - MyRabbit(mixed.sub)
}

TopicBridge Bridge1{
    R4ABroker(bridge.pub) - MyRabbit(bridge.sub)
}

RPCBridge rpcBridge1{
    MyRedis(popo) - MyRabbit(popo2)
}

RPCBridge rpcBridge2{
    R4ABroker(bridgeG1) - MyRabbit(bridgeG2)
}


Proxy testProxy{
    port:
        - rpc_service proxy_rpc:
    url: "http://google.com"
    method: GET
}

Proxy MixedProxy{
    port:
        - rpc_service mixed_rpc:
    url: "http://localhost:8000"
    method: GET
}
